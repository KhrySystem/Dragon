name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: RelWithDebInfo
  BOOST_INSTALL_VERSION: 1.79.0
  VULKAN_INSTALL_VERSION: 1.3.204.0

jobs:

  get-macos-dependencies:
    runs-on: macos-11
    
    steps:
    - name: Install Boost
      id: install-boost
      uses: MarkusJx/install-boost@v2.4.0
      with:
        boost_version: ${{ env.BOOST_INSTALL_VERSION }}
        platform_version: 11
        toolset: clang
    
    - name: Install Vulkan
      id: install-vulkan
      uses: humbletim/setup-vulkan-sdk@v1.2.0
      with: 
        vulkan-query-version: ${{ env.VULKAN_INSTALL_VERSION }}
        vulkan-components: Vulkan-Headers, Vulkan-Loader, Glslang, SPIRV-Cross, SPIRV-Tools, SPIRV-Reflect, SPIRV-Headers
        vulkan-use-cache: true

  get-linux-dependencies:
    runs-on: ubuntu-20.04
    
    steps:
    - name: Install GLFW Dependencies
      run: sudo apt install libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev
      
    - name: Install Boost
      id: install-boost
      uses: MarkusJx/install-boost@v2.4.0
      with:
        boost_version: ${{ env.BOOST_INSTALL_VERSION }}
        platform_version: 20.04
        toolset: gcc

    - name: Check OpenCL Package Caches
      id: cache-opencl
      uses: actions/cache@v3
      with:
        path: |
            /usr/lib/x86_64-linux-gnu/libOpenCL.so
        key: ${{ runner.os }}-cache-opencl-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
            ${{ runner.os }}-cache-opencl-
            ${{ runner.os }}-cache-
            ${{ runner.os }}-

    - name: Install Vulkan
      uses: humbletim/setup-vulkan-sdk@v1.2.0
      with: 
        vulkan-query-version: ${{ env.VULKAN_INSTALL_VERSION }}
        vulkan-components: Vulkan-Headers, Vulkan-Loader, Glslang, SPIRV-Cross, SPIRV-Tools, SPIRV-Reflect, SPIRV-Headers
        vulkan-use-cache: true

    - if: ${{ steps.cache-opencl.outputs.cache-hit != 'true' }}
      name: Install OpenCL
      continue-on-error: true
      run: |
          sudo apt install ocl-icd-opencl-dev
          
  build-linux-unix-makefiles:
    runs-on: ubuntu-latest
    needs: get-linux-dependencies

    env: 
      VULKAN_CMAKE_ARGS: -DVulkan_INCLUDE_DIR:Path=${{ env.VULKAN_SDK }}/include -DVulkan_LIBRARY:Path=${{ env.VULKAN_SDK }}/bin/vulkan-1.lib

    steps:
    - uses: actions/checkout@v3

    - name: Get DragonEngine Submodules
      run: git submodule update --init --recursive

    - name: Configure DragonEngine CMake Scripts
      run: cmake -S${{github.workspace}} --no-warn-unused-cli -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=TRUE -B${{github.workspace}}/bin -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DDRAGON_INSTALL_DIR:Path="${{github.workspace}}/sdk_build" -DBOOST_ROOT:Path=${{ steps.install-boost.outputs.BOOST_ROOT }} ${{ env.VULKAN_CMAKE_ARGS }}

    - name: Build DragonEngine
      run: cmake --build ${{github.workspace}}/bin --config ${{env.BUILD_TYPE}}

    - name: Test DragonEngine
      working-directory: ${{github.workspace}}/bin
      run: ctest -C ${{env.BUILD_TYPE}}
      
  build-macos-xcode-clang:
    runs-on: macos-12
    needs: get-macos-dependencies

    env: 
      VULKAN_CMAKE_ARGS: -DVulkan_INCLUDE_DIR:Path=${{ env.VULKAN_SDK }}/include -DVulkan_LIBRARY:Path=${{ env.VULKAN_SDK }}/bin/vulkan-1.lib
    
    steps:
    - name: Get DragonEngine Submodules
      run: git submodule update --init --recursive
    
    - name: Configure DragonEngine CMake Scripts
      run: cmake -S${{github.workspace}} --no-warn-unused-cli -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=TRUE -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DDRAGON_INSTALL_DIR:String="${{github.workspace}}/sdk_build" -DBOOST_ROOT:String=${{ steps.install-boost.outputs.BOOST_ROOT }} ${{ env.VULKAN_CMAKE_ARGS }}
      
    - name: Build DragonEngine
      run: cmake --build ${{github.workspace}}/bin --config ${{env.BUILD_TYPE}}

    - name: Test DragonEngine
      working-directory: ${{github.workspace}}/bin
      run: ctest -C ${{env.BUILD_TYPE}}
      
