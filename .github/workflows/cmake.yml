name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: RelWithDebInfo

jobs:
  build-windows:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest
    strategy:
      fail-fast: false

      matrix:
        cmake-generators: ["Visual Studio 16 2019 -A x64","Visual Studio 16 2019 -A x32", "Visual Studio 15 2017 -A x64", "Visual Studio 14 2015 -A x64"]
        vulkan-version: [ 1.0, 1.1, 1.2, 1.3 ]
        opencl-version: [ 1.1, 1.2, 2.0, 2.1, 2.2, 3.0]
        boost-version: [ 1.0, 1.10, 1.20, 1.30 ] # Not all of the versions, bc I'm lazy and can't deal with all of that

    steps:
    - uses: actions/checkout@v3
    
    - name: Install Dependencies
      env:
        vulkan: ${{vulkan-version}}
        opencl: ${{opencl-version}}
        boost: ${{boost-version}}
      run: .github/action_scripts/get_windows_deps.bat
      shell: powershell
      

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/bin -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DDRAGON_INSTALL_DIR:String="${{github.workspace}}/sdk_build"

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
  build-linux:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

      matrix:
        cmake-generators: ["Unix Makefile"]
        vulkan-version: [ 1.0, 1.1, 1.2, 1.3 ]
        opencl-version: [ 1.1, 1.2, 2.0, 2.1, 2.2, 3.0]
        boost-version: [ 1.0, 1.10, 1.20, 1.30 ] # Not all of the versions, bc I'm lazy and can't deal with all of that

    steps:
    - uses: actions/checkout@v3
    
    - name: Install Dependencies
      env:
        vulkan: ${{vulkan-version}}
        opencl: ${{opencl-version}}
        boost: ${{boost-version}}
      run: .github/action_scripts/get_windows_deps.sh
      shell: bash
      

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/bin -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DDRAGON_INSTALL_DIR:String="${{github.workspace}}/sdk_build"

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
