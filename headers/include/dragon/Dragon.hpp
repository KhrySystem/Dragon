#pragma once
#ifdef DRAGON_BOOST_FOUND
	#include <boost/accumulators/accumulators.hpp>
	#include <boost/algorithm.hpp>
	#include <boost/align.hpp>
	#include <boost/any.hpp>
	#include <boost/array.hpp>
	#include <boost/asio.hpp>
	#include <boost/assert.hpp>
	#include <boost/assign.hpp>
	#include <boost/atomic.hpp>
	#include <boost/beast.hpp>
	#include <boost/bimap.hpp>
	#include <boost/bimap.hpp>
	#include <boost/bind.hpp>
	#include <boost/callable_traits.hpp>
	#include <boost/chrono.hpp>
	#include <boost/circular_buffer.hpp>
	#include <boost/config.hpp>
	#include <boost/container.hpp>
	#include <boost/container_hash.hpp>
	#include <boost/context.hpp>
	#include <boost/context.hpp>
	#include <boost/contract.hpp>
	#include <boost/conversion.hpp>
	#include <boost/convert.hpp>
	#include <boost/core.hpp>
	#include <boost/coroutine.hpp>
	#include <boost/coroutine2.hpp>
	#include <boost/crc.hpp>
	#include <boost/date_time.hpp>
	#include <boost/describe.hpp>
	#include <boost/describe.hpp>
	#include <boost/detail.hpp>
	#include <boost/dll.hpp>
	#include <boost/dynamic_bitset.hpp>
	#include <boost/endian.hpp>
	#include <boost/exception.hpp>
	#include <boost/fiber.hpp>
	#include <boost/filesystem.hpp>
	#include <boost/flyweight.hpp>
	#include <boost/foreach.hpp>
	#include <boost/format.hpp>
	#include <boost/function.hpp>
	#include <boost/function_types.hpp>
	#include <boost/functional.hpp>
	#include <boost/fusion.hpp>
	#include <boost/geometry.hpp>
	#include <boost/gil.hpp>
	#include <boost/graph.hpp>
	#include <boost/graph_parallel.hpp>
	#include <boost/hana.hpp>
	#include <boost/headers.hpp>
	#include <boost/heap.hpp>
	#include <boost/histogram.hpp>
	#include <boost/hof.hpp>
	#include <boost/icl.hpp>
	#include <boost/integer.hpp>
	#include <boost/interprocess.hpp>
	#include <boost/intrusive.hpp>
	#include <boost/io.hpp>
	#include <boost/iostreams.hpp>
	#include <boost/iterator.hpp>
	#include <boost/json.hpp>
	#include <boost/lambda.hpp>
	#include <boost/lambda2.hpp>
	#include <boost/leaf.hpp>
	#include <boost/lexical_cast.hpp>
	#include <boost/local_function.hpp>
	#include <boost/locale.hpp>
	#include <boost/lockfree.hpp>
	#include <boost/log.hpp>
	#include <boost/logic.hpp>
	#include <boost/math.hpp>
	#include <boost/metaparse.hpp>
	#include <boost/move.hpp>
	#include <boost/mp11.hpp>
	#include <boost/mpi.hpp>
	#include <boost/mpl.hpp>
	#include <boost/msm.hpp>
	#include <boost/multi_array.hpp>
	#include <boost/multi_index.hpp>
	#include <boost/multiprecision.hpp>
	#include <boost/nowide.hpp>
	#include <boost/numeric.hpp>
	#include <boost/optional.hpp>
	#include <boost/outcome.hpp>
	#include <boost/parameter.hpp>
	#include <boost/parameter_python.hpp>
	#include <boost/pfr.hpp>
	#include <boost/phoenix.hpp>
	#include <boost/poly_collection.hpp>
	#include <boost/polygon.hpp>
	#include <boost/pool.hpp>
	#include <boost/predef.hpp>
	#include <boost/preprocessor.hpp>
	#include <boost/process.hpp>
	#include <boost/program_options.hpp>
	#include <boost/property_map.hpp>
	#include <boost/property_map_parallel.hpp>
	#include <boost/property_tree.hpp>
	#include <boost/proto.hpp>
	#include <boost/ptr_container.hpp>
	#include <boost/python.hpp>
	#include <boost/qvm.hpp>
	#include <boost/random.hpp>
	#include <boost/range.hpp>
	#include <boost/ratio.hpp>
	#include <boost/rational.hpp>
	#include <boost/regex.hpp>
	#include <boost/safe_numerics.hpp>
	#include <boost/scope_exit.hpp>
	#include <boost/serialization.hpp>
	#include <boost/signals2.hpp>
	#include <boost/smart_ptr.hpp>
	#include <boost/sort.hpp>
	#include <boost/spirit.hpp>
	#include <boost/stacktrace.hpp>
	#include <boost/statechart.hpp>
	#include <boost/static_assert.hpp>
	#include <boost/static_string.hpp>
	#include <boost/stl_interfaces.hpp>
	#include <boost/system.hpp>
	#include <boost/test.hpp>
	#include <boost/thread.hpp>
	#include <boost/throw_exception.hpp>
	#include <boost/timer.hpp>
	#include <boost/tokenizer.hpp>
	#include <boost/tti.hpp>
	#include <boost/tuple.hpp>
	#include <boost/type_erasure.hpp>
	#include <boost/type_index.hpp>
	#include <boost/type_traits.hpp>
	#include <boost/typeof.hpp>
	#include <boost/units.hpp>
	#include <boost/unordered.hpp>
	#include <boost/utility.hpp>
	#include <boost/uuid.hpp>
	#include <boost/variant.hpp>
	#include <boost/variant2.hpp>
	#include <boost/vmd.hpp>
	#include <boost/wave.hpp>
	#include <boost/winapi.hpp>
	#include <boost/xpressive.hpp>
	#include <boost/yap.hpp>
	#define dgAccelAccumulators boost::accumulators;
	#define dgAccelAlgorithm boost::algorithm;
#endif

#include "Dragon.h"