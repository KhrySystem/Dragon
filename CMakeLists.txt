cmake_minimum_required(VERSION 3.20)

project(Dragon)

option(DRAGON_INCLUDE_BOTH "Add Both Vulkan and OpenGL (if availible) to Dragon and choose the best subsystems of each. [NOT RECOMMENDED!!!!]" OFF)

include(.cmake/DragonGetVersionNumber.info)

message("Looking for a Vulkan installation...")
find_package(Vulkan)
if(Vulkan_FOUND)
	message("Vulkan - FOUND [${Vulkan_LIBRARY}]")
	add_compile_definitions(DRAGON_USE_VULKAN)

	list(APPEND DRAGON_INCLUDE_DIRECTORIES ${Vulkan_INCLUDE_DIRS})
	list(APPEND DRAGON_LINK_LIBRARIES ${Vulkan_LIBRARIES})
	

	if(Vulkan_glslc_FOUND)
		message("Vulkan GLSL Compiler Executable - FOUND [${Vulkan_GLSLC_EXECUTABLE}]")
		add_compile_definitions(DRAGON_VK_GLSLC_FOUND)
	else()
		message("Vulkan GLSL Compiler Executable - NOT FOUND")
	endif()

	if(Vulkan_glslang_FOUND)
		message("Vulkan GLSLang Library - FOUND [${Vulkan_glslang_LIBRARY}]")
		add_compile_definitions(DRAGON_VK_GLSLANG_FOUND)
	else()
		message("Vulkan GLSLang Library - NOT FOUND")
	endif()

	if(Vulkan_glslangValidator_FOUND)
		message("Vulkan GLSLang Validator Executable - FOUND [${Vulkan_GLSLANG_VALIDATOR_EXECUTABLE}]")
		add_compile_definitions(DRAGON_VK_GLSLANG_VALIDATOR_FOUND)
	else()
		message("Vulkan GLSLang Validator Executable - NOT FOUND")
	endif()

	if(Vulkan_shaderc_combined_FOUND)
		message("Vulkan ShaderC Combined Library - FOUND [${Vulkan_shaderc_combined_LIBRARY}]")
		add_compile_definitions(DRAGON_VK_SHADERC_COMBINED_FOUND)
	else()
		message("Vulkan ShaderC Combined Library - NOT FOUND")
	endif()

	if(Vulkan_SPIRV-Tools_FOUND)
		message("Vulkan SPIRV Tools Library - FOUND [${Vulkan_SPIRV-Tools_LIBRARY}]")
		add_compile_definitions(DRAGON_VK_SPIRV_TOOLS_FOUND)
	else()
		message("Vulkan SPIRV Tools Library - NOT FOUND")
	endif()

	if(Vulkan_MoltenVK_FOUND)
		message("Vulkan MoltenVK Library - FOUND [${Vulkan_MoltenVK_LIBRARY}]")
		add_compile_definitions(DRAGON_VK_MOLTENVK_FOUND)
	endif()

else()
	message("Failed to find a Vulkan installation.")
endif()

if( ( NOT Vulkan_FOUND ) OR (DRAGON_INCLUDE_BOTH))
	message("Looking for an OpenGL installation...")
	find_package(OpenGL)
	if(OpenGL_FOUND)
		message("OpenGL - FOUND")
		list(APPEND DRAGON_INCLUDE_DIRECTORIES ${OPENGL_INCLUDE_DIR})
		add_compile_definitions(DRAGON_USE_OPENGL)

		if(OpenGL_OpenGL_FOUND)
			message("OpenGL Binary Library - FOUND [${OPENGL_gl_LIBRARY}]")
			add_compile_definitions(DRAGON_GL_OPENGL_FOUND)
			list(APPEND DRAGON_LINK_LIBRARIES OpenGL::GL)
		else()
			message("OpenGL Binary Library - NOT FOUND")
		endif()

		if(OPENGL_XMESA_FOUND)
			message("OpenGL XMesa Library - FOUND")
			add_compile_definitions(DRAGON_GL_XMESA_FOUND)
		else()
			message("OpenGL XMesa Library - NOT FOUND")
		endif()

		if(OPENGL_GLU_FOUND)
			message("OpenGL GLU Library - FOUND [${OPENGL_glu_LIBRARY}]")
			add_compile_definitions(DRAGON_GL_GLU_FOUND)
			list(APPEND DRAGON_LINK_LIBRARIES OpenGL::GLU)
		else()
			message("OpenGL GLU Library - NOT FOUND")
		endif()

		if(OpenGL_GLX_FOUND)
			message("OpenGL GLX Library - FOUND [${OPENGL_glx_LIBRARY}]")
			add_compile_definitions(DRAGON_GL_GLX_FOUND)
			list(APPEND DRAGON_LINK_LIBRARIES OpenGL::GLX)
		else()
			message("OpenGL GLX Library - NOT FOUND")
		endif()

		if(OpenGL_EGL_FOUND)
			message("OpenGL EGL Library - FOUND [${OPENGL_egl_LIBRARY}]")
			list(APPEND DRAGON_INCLUDE_DIRECTORIES ${OPENGL_EGL_INCLUDE_DIRS})
			add_compile_definitions(DRAGON_GL_EGL_FOUND)
			list(APPEND DRAGON_LINK_LIBRARIES OpenGL::EGL)
		else()
			message("OpenGL EGL Library - NOT FOUND")
		endif()
	endif()
endif()

if( ( NOT Vulkan_FOUND ) AND ( NOT OpenGL_FOUND ) )
	message(FATAL_ERROR "No Graphics library found.")
endif()

add_subdirectory(lib)

message("Looking for a Boost.hpp installation.")
if(CMAKE_BUILD_TYPE MATCHES RELEASE)
	message(" -- Looking for RELEASE Libraries")
	set(Boost_USE_DEBUG_LIBS OFF)
	set(Boost_USE_RELEASE_LIBS ON)
	set(Boost_USE_DEBUG_RUNTIME OFF)
	set(Boost_USE_DEBUG_PYTHON OFF)
else()
	message(" -- Defaulting to looking for DEBUG Libraries")
	set(Boost_USE_DEBUG_LIBS ON)
	set(Boost_USE_RELEASE_LIBS OFF)
	set(Boost_USE_DEBUG_RUNTIME ON)
	set(Boost_USE_DEBUG_PYTHON ON)
endif()

set(Boost_USE_MULTITHREADED ON)

find_package(Boost)

if(Boost_FOUND)
	message("Boost.hpp Libraries - FOUND [${Boost_VERSION_STRING}]")
	add_compile_definitions(DRAGON_BOOST_FOUND)
	list(APPEND DRAGON_INCLUDE_DIRECTORIES ${Boost_INCLUDE_DIRS})
	list(APPEND DRAGON_LINK_LIBRARIES ${Boost_LIBRARIES})
else()
	message("Boost.hpp Libraries - NOT FOUND")
endif()

list(APPEND DRAGON_INCLUDE_DIRECTORIES 
	headers/include lib/glfw lib/glfw/include lib/glfw/src lib/glfw/deps
)
list(APPEND DRAGON_LINK_LIBRARIES
	glfw
)
include_directories(${DRAGON_INCLUDE_DIRECTORIES})
link_libraries(${DRAGON_LINK_LIBRARIES})
add_subdirectory(headers)
add_subdirectory(src)
add_subdirectory(tools)