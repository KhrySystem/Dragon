#pragma once
#ifdef _cplusplus
extern "C" {
#endif

#include "predef/architecture.h"
#include "predef/compiler.h"
#include "predef/language.h"
#include "predef/os.h"
#include "predef/other.h"
#include "predef/platform.h"
#include "predef/version.h"

// Include Vulkan Headers
#ifdef _cplusplus
    #include <vulkan/vulkan.hpp>
#else
    #include <vulkan/vulkan.h>
#endif

#define GLFW_INCLUDE_VULKAN

// Include GLFW Headers
#include <GLFW/glfw3.h>

// Properly define DGAPI
#ifdef DG_C
    #if BOOST_OS_WINDOWS && defined(DRAGON_BUILD_DLL)
        #define DGAPI extern "C" __declspec(dllexport)
    #elif BOOST_OS_WINDOWS && defined(DRAGON_DLL)
        #define DGAPI extern "C" __declspec(dllimport)
    #elif defined(__GNUC__) && defined(DRAGON_BUILD_DLL)
        #define DGAPI extern "C" __attribute__((visibility("default")))
    #else
        #define DGAPI extern "C"
    #endif
#else
    #if BOOST_OS_WINDOWS && defined(DRAGON_BUILD_DLL)
        #define DGAPI __declspec(dllexport)
    #elif BOOST_OS_WINDOWS && defined(DRAGON_DLL)
        #define DGAPI __declspec(dllimport)
    #elif defined(__GNUC__) && defined(DRAGON_BUILD_DLL)
        #define DGAPI __attribute__((visibility("default")))
    #else
        #define DGAPI 
    #endif
#endif

// Define DRAGON_VERSION
#ifdef VK_MAKE_API_VERSION
    #define DRAGON_VERSION VK_MAKE_API_VERSION(@Dragon_VERSION_MAJOR@, @Dragon_VERSION_MINOR@, @Dragon_VERSION_PATCH@, @Dragon_VERSION_TWEAK@)
#else
    #define DRAGON_VERSION VK_MAKE_VERSION(@Dragon_VERSION_MAJOR@, @Dragon_VERSION_MINOR@, @Dragon_VERSION_PATCH@)
#endif

// if not given, default the app version to 1.0.0.0
#ifndef APP_VERSION
    #ifdef VK_MAKE_API_VERSION
        #define APP_VERSION VK_MAKE_API_VERSION(1, 0, 0, 0)
    #else  
        #define APP_VERSION VK_MAKE_VERSION(1, 0, 0)
    #endif
#endif

// if not given, default the app name to "dgEngine"
#ifndef APP_NAME
    #define APP_NAME "dgEngine"
#endif

// Define basic types for consistency with dependencies
typedef VkBool32 DgBool32;
#define DG_TRUE GLFW_TRUE
#define DG_FALSE GLFW_FALSE
typedef uint_fast64_t DgUInt64;
typedef int_fast64_t DgInt64;
typedef uint_fast32_t DgUInt32;
typedef int_fast32_t DgInt32;

#ifdef _cplusplus
} // dragon/dragon_core.h
#endif