#pragma once
#ifdef _cplusplus
extern "C" {
#endif

#include <boost/predef.h>

#include <cstdio>
#include <cstring>
#include <fstream>
#include <string>

#ifndef _NDEBUG
    #if BOOST_OS_WINDOWS
        #define _CRTDBG_MAP_ALLOC
        #include <stdlib.h>
        #include <crtdbg.h>
    #endif
#endif

#include <algorithm>
#include <array>
#include <thread>
#include <memory>

#define GLFW_INCLUDE_NONE
#define GLFW_INCLUDE_VULKAN
#include <GLFW/glfw3.h>

#include <glm/glm.hpp>

#ifndef DRAGON_DOUBLE_PRECISION_SHADER
    #define DG_FLOAT float
    #define DG_VEC2 glm::vec2
    #define DG_VEC3 glm::vec3
    #define DG_VEC4 glm::vec4
#else
    #define DG_FLOAT double
    #define DG_VEC2 glm::dvec2
    #define DG_VEC3 glm::dvec3
    #define DG_VEC4 glm::dvec4
#endif

/**
 * @brief Macro for defining the export/import attribute of a function 
 */
#ifdef DG_C
    #if BOOST_OS_WINDOWS && defined(DRAGON_BUILD_DLL)
        #define DGAPI extern "C" __declspec(dllexport)
    #elif BOOST_OS_WINDOWS && defined(DRAGON_DLL)
        #define DGAPI extern "C" __declspec(dllimport)
    #elif defined(__GNUC__) && defined(DRAGON_BUILD_DLL)
        #define DGAPI extern "C" __attribute__((visibility("default")))
    #else
        #define DGAPI extern "C"
    #endif
#else
    #if BOOST_OS_WINDOWS && defined(DRAGON_BUILD_DLL)
        #define DGAPI __declspec(dllexport)
    #elif BOOST_OS_WINDOWS && defined(DRAGON_DLL)
        #define DGAPI __declspec(dllimport)
    #elif defined(__GNUC__) && defined(DRAGON_BUILD_DLL)
        #define DGAPI __attribute__((visibility("default")))
    #else
        #define DGAPI 
    #endif
#endif

/**
 * @brief Macro for how many frames Dragon should prepare before waiting on the GPU. 
 * NOTE: The default is 2, and should not be changed for most applications.
 */
#ifndef DRAGON_RENDER_FRAME_MAX 
    #define DRAGON_RENDER_FRAME_MAX 2
#endif

/**
 * @brief Macro for creating the version number for Dragon Engine
 */
#ifdef VK_MAKE_API_VERSION
    #define DRAGON_VERSION VK_MAKE_API_VERSION(@Dragon_VERSION_TWEAK@, @Dragon_VERSION_MAJOR@, @Dragon_VERSION_MINOR@, @Dragon_VERSION_PATCH@)
#else
    #define DRAGON_VERSION VK_MAKE_VERSION(@Dragon_VERSION_MAJOR@, @Dragon_VERSION_MINOR@, @Dragon_VERSION_PATCH@)
#endif

#define DRAGON_MAX_POINT_LIGHTS @Dragon_MAX_POINT_LIGHTS@
#define DRAGON_MAX_DIRECTIONAL_LIGHTS @Dragon_MAX_DIRECTIONAL_LIGHTS@
#define DRAGON_VERTEX_ATTRIBUTE_COUNT 2
#define DRAGON_NOEXCEPT noexcept

/**
 * @brief Macro for creating the version number for the application
 */
#ifndef APP_VERSION
    #ifdef VK_MAKE_API_VERSION
        #define APP_VERSION VK_MAKE_API_VERSION(1, 0, 0, 0)
    #else  
        #define APP_VERSION VK_MAKE_VERSION(1, 0, 0)
    #endif
#endif

/**
 * @brief Macro for the name of the application
 */
#ifndef APP_NAME
    #define APP_NAME "dgEngine"
#endif

// Define basic types for consistency with dependencies
typedef VkBool32 DgBool32;
#define DG_TRUE GLFW_TRUE
#define DG_FALSE GLFW_FALSE
typedef uint_fast64_t DgUInt64;
typedef int_fast64_t DgInt64;
typedef uint_fast32_t DgUInt32;
typedef int_fast32_t DgInt32;

#define dgEnumerateVkInstanceExtensionProperties(pExtName, pPropertyCount, pProperties) ((PFN_vkEnumerateInstanceExtensionProperties)glfwGetInstanceProcAddress(NULL, "vkEnumerateInstanceExtensionProperties"))(pExtName, pPropertyCount, pProperties)
#define dgEnumerateVkInstanceLayerProperties(pPropertyCount, pProperties) ((PFN_vkEnumerateInstanceLayerProperties)glfwGetInstanceProcAddress(NULL, "vkEnumerateInstanceLayerProperties"))(pPropertyCount, pProperties)
#define dgCreateVkInstance(pCreateInfo, pAllocation, pInstance) ((PFN_vkCreateInstance)glfwGetInstanceProcAddress(NULL, "vkCreateInstance"))(pCreateInfo, pAllocation, pInstance)
#ifndef NDEBUG
#define dgCreateVkDebugUtilsMessengerEXT(instance, pCreateInfo, pAllocator, pDebugMessenger) ((PFN_vkCreateDebugUtilsMessengerEXT)glfwGetInstanceProcAddress(instance, "vkCreateDebugUtilsMessengerEXT"))(instance, pCreateInfo, pAllocator, pDebugMessenger)
#endif
#define dgEnumerateVkPhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices) ((PFN_vkEnumeratePhysicalDevices)glfwGetInstanceProcAddress(instance, "vkEnumeratePhysicalDevices"))(instance, pPhysicalDeviceCount, pPhysicalDevices)
#ifdef _cplusplus
} // dragon/dragon_core.h
#endif